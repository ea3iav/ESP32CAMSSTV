#include <Arduino.h>
#include <esp_camera.h>
#include "SSTVRobot36.h"

#define CAMERA_MODEL_AI_THINKER

#include "camera_pins.h"

SSTVRobot36 sstv(25); // Use GPIO 25 for DAC1

unsigned long lastCaptureTime = 0;
const unsigned long captureInterval = 10 * 60 * 1000; // 10 minutes

void setup() {
  Serial.begin(115200);
  Serial.println("ESP32 SSTV Robot36 every 10 minutes");

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  
  if(psramFound()){
    config.frame_size = FRAMESIZE_VGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }

  // Camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  lastCaptureTime = millis() - captureInterval; // Force first capture immediately
}

void loop() {
  if (millis() - lastCaptureTime >= captureInterval) {
    lastCaptureTime = millis();

    Serial.println("Taking photo...");
    camera_fb_t *fb = esp_camera_fb_get();
    if (!fb) {
      Serial.println("Camera capture failed");
      return;
    }

    Serial.println("Photo taken. Converting to RGB888...");

    // Convert JPEG to RGB888
    // Assumes you have JPEG decoding logic (or change to PIXFORMAT_RGB888 to avoid decoding)

    // For simplicity, we'll simulate grayscale image or replace with demo data
    // You would decode the JPEG here into RGB data matching 320x240 size
    uint16_t w = 320, h = 240;
    uint8_t *img = new uint8_t[w * h * 3];

    for (int i = 0; i < w * h; ++i) {
      img[i * 3] = 127;     // R
      img[i * 3 + 1] = 127; // G
      img[i * 3 + 2] = 127; // B
    }

    Serial.println("Transmitting via SSTV...");
    sstv.begin();
    sstv.writeHeader();
    sstv.writeImage(img, w, h);
    sstv.end();
    Serial.println("Transmission complete.");

    delete[] img;
    esp_camera_fb_return(fb);
  }

  delay(100); // Light CPU usage
}
